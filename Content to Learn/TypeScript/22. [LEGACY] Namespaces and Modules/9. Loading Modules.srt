1
00:00:02,220 --> 00:00:08,540
Well you might say of course this happens because we're not bundling it into one file, right,

2
00:00:08,550 --> 00:00:17,550
so let's do this. Let's actually just compile the app.ts file, add the outFile and name it

3
00:00:17,610 --> 00:00:20,600
app.js. Well with that,

4
00:00:20,940 --> 00:00:25,510
if we reload the page, we're not getting the error anymore

5
00:00:25,710 --> 00:00:27,240
but I'm not seeing anything either,

6
00:00:27,240 --> 00:00:30,690
so let's have a look at the app.js file now.

7
00:00:30,690 --> 00:00:34,220
Well the app.js file looks pretty empty to me to be honest,

8
00:00:34,260 --> 00:00:36,590
no code inside of it

9
00:00:37,530 --> 00:00:40,960
and that is clearly the app.js which was created here,

10
00:00:41,010 --> 00:00:43,440
so it's ignoring all these things.

11
00:00:43,440 --> 00:00:43,960
Now let's try out

12
00:00:43,980 --> 00:00:50,860
what happens if we just use tsc and then outFile app.js.

13
00:00:51,420 --> 00:00:58,770
Well now we get an error, that only amd and system modules are supported alongside outFile

14
00:00:58,770 --> 00:01:06,120
and that refers to how TypeScript should compile this to Javascript because as you might be aware, native

15
00:01:06,120 --> 00:01:12,510
Javascript doesn't support modules, native Javascript doesn't know the import export syntax. In native

16
00:01:12,510 --> 00:01:13,650
Javascript,

17
00:01:13,650 --> 00:01:19,510
well we can split our code over multiple files but we can't import Javascript files into Javascript

18
00:01:19,550 --> 00:01:27,470
files, at least not without ES6 which is also native Javascript but not supported by all browsers yet.

19
00:01:27,630 --> 00:01:33,470
So what we can do is we can go to our tsconfig here and currently, module is set to CommonJS,

20
00:01:33,540 --> 00:01:42,450
that means it is compiled, your TypeScript imports here are compiled to meet the CommonJS module

21
00:01:42,450 --> 00:01:43,620
standard.

22
00:01:43,620 --> 00:01:44,710
What does that mean?

23
00:01:44,730 --> 00:01:51,800
It does mean that it is trying to fulfill the CommonJS way of structuring your code,

24
00:01:51,930 --> 00:02:00,370
that would be with the require keyword which is added as an import and we can see this if we just

25
00:02:00,370 --> 00:02:00,820
ran tsc

26
00:02:00,830 --> 00:02:02,840
without bundling,

27
00:02:03,000 --> 00:02:09,360
now you see that in app.js we're trying to import these circle dependency with the require keyword.

28
00:02:09,390 --> 00:02:15,960
If you are into NodeJS, that might look familiar and indeed that is the same syntax but that

29
00:02:15,960 --> 00:02:21,930
syntax of course doesn't work in the browser, at least not without a module loader which is what we need

30
00:02:21,930 --> 00:02:23,040
for that.

31
00:02:23,070 --> 00:02:29,370
Now before I come to setting up a module loader, the error message before told that we can compile

32
00:02:29,400 --> 00:02:30,920
everything into one file

33
00:02:31,110 --> 00:02:34,570
if we set this to amd for example,

34
00:02:34,710 --> 00:02:38,630
so let's set it to amd and then run this command again.

35
00:02:39,030 --> 00:02:40,160
Now it worked

36
00:02:40,380 --> 00:02:43,580
and now what happens if we reload our page here?

37
00:02:43,950 --> 00:02:46,040
Well now define is not defined,

38
00:02:46,350 --> 00:02:52,380
so the app.js file now also looks totally different but somehow we're not getting there.

39
00:02:52,560 --> 00:02:55,010
Well the reason stays the same,

40
00:02:55,170 --> 00:02:57,050
we need a module loader,

41
00:02:57,210 --> 00:03:04,330
all these ways of bundling our files and loading these modules, there are several systems. This is

42
00:03:04,370 --> 00:03:05,010
one system,

43
00:03:05,010 --> 00:03:09,600
it allows us to bundle everything into one file but it still creates some modules Javascript doesn't

44
00:03:09,600 --> 00:03:14,710
know with the unknown define keyword without bundling it into one file,

45
00:03:14,730 --> 00:03:18,640
so with that command again, you see we have,

46
00:03:18,870 --> 00:03:25,380
if I change this back to CommonJS here and compile again, the way we did before,

47
00:03:25,370 --> 00:03:30,120
you see now we have this require keyword and while it might look strange that the code changes that

48
00:03:30,120 --> 00:03:31,640
dramatically all the time,

49
00:03:31,650 --> 00:03:38,990
in the end the only thing that changes is how TypeScript tries to transpile or translate this into Javascript

50
00:03:39,000 --> 00:03:44,180
using different modules systems which have come up over the last couple of years.

51
00:03:44,190 --> 00:03:45,990
In the end, it always comes down to the same thing,

52
00:03:45,990 --> 00:03:47,460
we need a module loader though.

53
00:03:47,490 --> 00:03:49,070
Now what is a module loader?

54
00:03:49,380 --> 00:03:52,800
Well a popular module loader is SystemJS.

55
00:03:52,800 --> 00:03:58,950
So if you google for SystemJS and go to a Github page, they will tell you that this is a universal dynamic

56
00:03:58,950 --> 00:04:05,010
module loader which loads ES6 module, AMD, CommonJS and so on,

57
00:04:05,010 --> 00:04:11,110
so basically it loads all kind of module formats which have come up over the last couple of years,

58
00:04:11,130 --> 00:04:17,030
that of course is great because we can create all kinds of formats with TypeScript.

59
00:04:17,090 --> 00:04:23,430
Now since this sounds pretty good, SystemJS might be what we need and actually SystemJS is such

60
00:04:23,430 --> 00:04:24,360
a module loader.

61
00:04:24,420 --> 00:04:25,760
Now what is a module loader?

62
00:04:25,830 --> 00:04:29,410
It's Javascript itself but it adds the logic

63
00:04:29,430 --> 00:04:33,530
our browser needs to be able to work with these commands

64
00:04:33,570 --> 00:04:38,420
it doesn't know by default, like require for example.

65
00:04:38,880 --> 00:04:46,800
So we have to install Node or SystemJS here, excuse me and then we can use it to load our files and

66
00:04:46,800 --> 00:04:50,220
modules and make sure that everything runs fine in the browser.

67
00:04:50,400 --> 00:04:56,310
So while this might look complicated, setting it up and using it is actually pretty simple,

68
00:04:56,340 --> 00:05:00,980
so let's go through the steps we need to do. Back in the project,

69
00:05:00,990 --> 00:05:07,920
the first thing I need to do is I need to install SystemJS and I'll use npm for that.

70
00:05:08,600 --> 00:05:13,060
I'll add save to it because this will be a dependency

71
00:05:13,070 --> 00:05:18,340
I will need at runtime in the production environment, not only in development environment too.

72
00:05:18,770 --> 00:05:22,880
So that will pull down SystemJS and add it to my project,

73
00:05:22,910 --> 00:05:27,850
I will therefore see it here as a dependency in the package.json file once it is finished

74
00:05:28,250 --> 00:05:32,620
and with that, I'm ready to use SystemJS. Now in order to use it,

75
00:05:32,660 --> 00:05:40,840
I'll go to my index.html file and now I'm getting rid of this import here of app.js, instead

76
00:05:40,850 --> 00:05:47,150
here I want to import SystemJS which will be placed in the node_modules folder of course since

77
00:05:47,150 --> 00:05:54,920
we just added it with the npm command, here we can access SystemJS and then here we want to access the dist

78
00:05:54,920 --> 00:06:01,020
folder and in the dist folder, we can pull in SystemJS, like that.

79
00:06:01,100 --> 00:06:02,350
Now with this, we get SystemJS

80
00:06:02,450 --> 00:06:05,290
but now our own code is no longer available, right?

81
00:06:05,600 --> 00:06:12,170
Well if we have a look at the documentation of SystemJS, it also shows us how to import our own

82
00:06:12,170 --> 00:06:14,840
code, so I can just copy that snippet here,

83
00:06:14,840 --> 00:06:17,690
we don't need the first line, that just import SystemJS,

84
00:06:17,690 --> 00:06:24,690
we already did that, add the script here and now we need to fine tune it a little bit.

85
00:06:24,800 --> 00:06:26,670
The

86
00:06:26,690 --> 00:06:27,560
baseURL /js

87
00:06:27,560 --> 00:06:29,900
is wrong,

88
00:06:30,050 --> 00:06:38,060
our baseURL is just slash since all our files are placed in the root directory here and then

89
00:06:38,060 --> 00:06:48,790
we want to import app.js which will be our main file. With that if I save this and now run the tsc

90
00:06:48,800 --> 00:06:50,180
command again,

91
00:06:50,600 --> 00:06:57,050
well let's go back to the browser and reload this page, would have been too nice to have it work right

92
00:06:57,080 --> 00:06:57,780
now, right?

93
00:06:57,980 --> 00:07:02,090
The issue is it's now not finding the /math/circle file

94
00:07:02,300 --> 00:07:08,330
and the reason for that is of course that /circle doesn't have a file extension and it doesn't

95
00:07:08,330 --> 00:07:12,180
have this file extension because here in our import in app.ts,

96
00:07:12,190 --> 00:07:15,080
we're not using this file extension,

97
00:07:15,080 --> 00:07:23,530
we're setting up this file without an extension, which is fine by TypeScript but not by SystemJS. With that

98
00:07:23,600 --> 00:07:30,350
error back in the project, the way we can fix this is by going to our index.html file and we have to tell SystemJS

99
00:07:30,350 --> 00:07:37,010
that our base extension is Javascript and in the SystemJS.config, we can easily fix this by adding

100
00:07:37,010 --> 00:07:44,870
defaultJSExtensions and set this to true which means it will look or it will automatically add

101
00:07:44,870 --> 00:07:52,690
a .js at the end. With that if I clear the console and reload this page, we now see the output

102
00:07:52,730 --> 00:07:58,580
we expect, this is just a standard floating point error as introduced by Javascript, has nothing to do with

103
00:07:58,580 --> 00:08:02,710
TypeScript and we can see that now we get the working modules

104
00:08:02,750 --> 00:08:07,910
and while this was quite a lot of work, it's just some initial setup and to be honest, it weren't that

105
00:08:07,910 --> 00:08:08,860
many steps,

106
00:08:08,960 --> 00:08:15,170
it was just difficult to understand why we need this module loader and that it won't work without one because

107
00:08:15,200 --> 00:08:22,100
the different module formats which you used over the last years are all not supported by native Javascript,

108
00:08:22,100 --> 00:08:28,130
we need to have a module loader. And then it's totally up to you which module format you want to use,

109
00:08:28,190 --> 00:08:35,120
if it is CommonJS as is the default here and as is regularly used or if you want to use one of the

110
00:08:35,120 --> 00:08:40,460
other formats and which types are supported. Well the TypeScript handbook gives a good overview

111
00:08:40,460 --> 00:08:47,930
but basically, all the major module types or module bundling ways are supported

112
00:08:47,930 --> 00:08:54,710
but as I said, CommonJS is the default which you'll often see and which works fine, which is the one

113
00:08:54,740 --> 00:08:58,060
I will use throughout this course when working with modules.
