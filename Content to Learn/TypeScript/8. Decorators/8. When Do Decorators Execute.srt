1
00:00:02,470 --> 00:00:08,130
Before we dive into more examples let's understand the order in which decorators run though.

2
00:00:08,350 --> 00:00:14,440
And here it's important to understand that first of all they're all running without us instantiating

3
00:00:14,440 --> 00:00:21,880
this product or in other words if I create a product here with new product book for nineteen dollars

4
00:00:22,060 --> 00:00:26,520
and x rated No product your book queue for twenty nine dollars.

5
00:00:26,680 --> 00:00:33,550
This compiles without errors but my decorator code here doesn't run more often so it's not the instantiation

6
00:00:33,730 --> 00:00:35,390
of this class that matters.

7
00:00:35,440 --> 00:00:41,710
All these decorators no matter if it was a property decorator method decorator an excess or decorator

8
00:00:41,860 --> 00:00:48,920
or a parameter decorator they all executed when you defined this class and that's important to understand.

9
00:00:48,970 --> 00:00:55,120
These are not decorators that run at runtime when you call a method or when you work with a property.

10
00:00:55,120 --> 00:00:57,200
This is not what they do.

11
00:00:57,250 --> 00:01:02,470
Instead these decorators allow you to do additional behind the scenes setup work.

12
00:01:02,470 --> 00:01:07,630
When a class is defined back to that meta programming concept I explained earlier.

13
00:01:07,630 --> 00:01:08,090
Right.

14
00:01:08,110 --> 00:01:14,950
That's the idea behind decorators or debts their core use case they're not event listeners you add to

15
00:01:14,950 --> 00:01:18,370
something so that when you work with a property you can run some code.

16
00:01:18,550 --> 00:01:24,190
You can make something like that work with decorators actually but by tweaking and editing something

17
00:01:24,190 --> 00:01:25,150
behind the scenes.

18
00:01:25,300 --> 00:01:32,830
But the decorator itself really is just a function that executes when your classes defined when your

19
00:01:32,830 --> 00:01:39,160
method therefore is registered and so on and you can then use the decorator to do some behind the scenes

20
00:01:39,160 --> 00:01:46,840
work to then set up some code that should run whatever it is called to add extra metadata or store some

21
00:01:46,840 --> 00:01:52,060
data about a property somewhere else in your project or in your library which you're creating.

22
00:01:52,060 --> 00:01:58,300
This is what you can use decorators for and that's all the pattern you'll kind of see when I now show

23
00:01:58,300 --> 00:02:02,350
you these examples of what you could build with decorators.

24
00:02:02,340 --> 00:02:09,190
They're adding extra functionality behind the scenes which then sometimes can execute when you do something

25
00:02:09,340 --> 00:02:14,320
with your claws or with your method but which can also do totally different things.

26
00:02:15,280 --> 00:02:21,330
That's all important for our person example from earlier with the with template decorator.

27
00:02:21,340 --> 00:02:25,110
This does not add this template whenever we instantiate a person here.

28
00:02:25,210 --> 00:02:31,150
It does added whenever we defined as class we would have to add extra logic instead of our decorator

29
00:02:31,150 --> 00:02:37,480
function to change this behavior and to maybe just story this template in some other data structure

30
00:02:37,510 --> 00:02:43,680
of our project which we then tap in to whenever we do create a new person here.

31
00:02:43,690 --> 00:02:49,840
So we basically just set this up when we defined a class but we tend to store it behind the scenes internally

32
00:02:50,080 --> 00:02:52,410
and we can then use it when we want to use it.

33
00:02:52,420 --> 00:02:57,580
Right now we always rendered as when we defined as class not in view create a new instance.

34
00:02:57,610 --> 00:03:02,440
This is how decorators execute and as I said Now I will show you a couple of examples where we take

35
00:03:02,440 --> 00:03:08,760
advantage of decorators in general and off their execution time to do some nice things with them.
