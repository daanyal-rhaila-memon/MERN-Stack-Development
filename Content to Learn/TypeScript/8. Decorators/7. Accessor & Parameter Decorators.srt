1
00:00:02,240 --> 00:00:03,500
Now both sides properties.

2
00:00:03,500 --> 00:00:06,720
You can also add decorators to accessories and there.

3
00:00:06,740 --> 00:00:11,750
I will create a new decorator function because this will now receive free arguments.

4
00:00:11,890 --> 00:00:12,930
Too.

5
00:00:13,250 --> 00:00:18,380
It will also get the target which again is easier to prototype.

6
00:00:18,380 --> 00:00:24,350
If we're dealing with instance excess or if we're dealing with a static one it will be the constructor

7
00:00:24,350 --> 00:00:24,960
function.

8
00:00:25,010 --> 00:00:27,320
So we don't know it will be of type any.

9
00:00:27,320 --> 00:00:35,430
Then we'll have the name of the member we're dealing with so the name of the successor and the end end

10
00:00:35,450 --> 00:00:38,530
will also have the property descriptor here.

11
00:00:39,630 --> 00:00:43,910
Which will be of type property descriptor that subtype built into typescript.

12
00:00:44,640 --> 00:00:50,100
So in there let's log accessed her decorator.

13
00:00:50,100 --> 00:00:54,030
And then I will also console lock the target here.

14
00:00:54,280 --> 00:01:01,760
Then maybe new lines to make that more readable in the output the name and also the descriptor.

15
00:01:01,770 --> 00:01:10,420
Now let's add log to 2D setter here like this and let's see what we get if we save that you see down

16
00:01:10,420 --> 00:01:14,020
there we get the successor decorator which executes here.

17
00:01:14,140 --> 00:01:19,090
We got our prototype again the same as above for the property.

18
00:01:19,360 --> 00:01:23,040
Then we got the name of our successor price.

19
00:01:23,050 --> 00:01:24,940
In this case not underscore price.

20
00:01:24,940 --> 00:01:30,910
So not the property with which it deals internally instead really the name of the accessory itself.

21
00:01:30,910 --> 00:01:36,700
And we got a property descriptor here where we see that a setter function is defined for example a getter

22
00:01:36,700 --> 00:01:42,070
function is not because for a price I only have a setter no getter.

23
00:01:42,070 --> 00:01:47,630
And we see that it's not enumerable but that it is configurable so that we can change this definition

24
00:01:47,630 --> 00:01:50,980
here for example that we can delete it and so on.

25
00:01:51,010 --> 00:01:55,300
This all exists and this is how we can add add decorator to an accessory.

26
00:01:55,300 --> 00:02:01,390
And what we then can access inside of this decorator now besides properties and accessories we also

27
00:02:01,390 --> 00:02:04,370
got methods and we can add decorators to methods.

28
00:02:04,390 --> 00:02:11,670
So here I'll add log free and add that to my method down there to get price with text.

29
00:02:12,030 --> 00:02:19,610
And now the question of course is which arguments does such a method decorator receive a method decorator.

30
00:02:19,610 --> 00:02:22,080
All the receives free arguments.

31
00:02:22,250 --> 00:02:28,490
The target again which if it's the instance method is the prototype of the object.

32
00:02:28,490 --> 00:02:33,420
If it's a static method the constructor function justice before then.

33
00:02:33,470 --> 00:02:43,550
The name of the method here so string or symbol actually and also the descriptor at the end property

34
00:02:43,550 --> 00:02:44,470
descriptor.

35
00:02:44,510 --> 00:02:49,460
These are the free arguments we get here and you see these are the same arguments as in our assessor.

36
00:02:49,460 --> 00:02:57,350
So indeed we could also reuse this but I will create a new one so that here I can print method decorator

37
00:02:59,060 --> 00:03:06,240
knowing that if I save this does executes and you see here our method decorator executes and then here

38
00:03:06,240 --> 00:03:13,050
we get our prototype same object as before we get the name of the method here and we get this descriptor

39
00:03:13,050 --> 00:03:14,760
of this method here.

40
00:03:14,760 --> 00:03:19,830
So the very same behavior as before basically just a descriptor is a little bit different since it's

41
00:03:19,830 --> 00:03:22,720
a method descriptor and not an accessory descriptor.

42
00:03:22,740 --> 00:03:25,710
We've got a value and a rival property here.

43
00:03:25,710 --> 00:03:30,920
Previously on The successor descriptor we had get and set but that's just a javascript difference.

44
00:03:30,960 --> 00:03:33,400
Nothing typescript specific.

45
00:03:33,510 --> 00:03:41,400
So here we do have our third decorator function which we now added to a method the last decorator we

46
00:03:41,400 --> 00:03:43,370
can add is to a parameter.

47
00:03:43,410 --> 00:03:45,720
So let's do that now for that.

48
00:03:45,720 --> 00:03:53,340
I'll create one more function here log for and then want to add log for two this one parameter I'm getting

49
00:03:53,340 --> 00:03:54,410
here Tex.

50
00:03:54,550 --> 00:03:57,180
And you could add one to every parameter you get of course.

51
00:03:57,180 --> 00:04:02,920
You don't have to but you can add them independently to any parameter you want to add a decorator to.

52
00:04:03,030 --> 00:04:06,910
Now what does a parameter decorator get as arguments.

53
00:04:06,930 --> 00:04:09,170
Well it gets the target.

54
00:04:09,510 --> 00:04:10,690
Same as before.

55
00:04:10,830 --> 00:04:15,690
The next argument we get is the name and not the name of the parameter but the name of the method in

56
00:04:15,690 --> 00:04:17,370
which we use this parameter.

57
00:04:17,370 --> 00:04:22,160
So basically the same as in the method decorator thus far but the last argument is different.

58
00:04:22,170 --> 00:04:28,410
This is now not the property descriptor but instead this is D position of his argument.

59
00:04:28,410 --> 00:04:35,320
So the number of the argument here for example this would be the first argument.

60
00:04:35,350 --> 00:04:44,320
So now again let's copy that here and put all of that into lock for parameter decorator and let's output

61
00:04:44,320 --> 00:04:47,190
position here as well so that we can see what's in there.

62
00:04:47,240 --> 00:04:53,200
We now save that we see our parameter decorator up there not the very lost output because execution

63
00:04:53,200 --> 00:04:59,470
order is different but we see our parameter decorator here and then here we get the prototype as before

64
00:04:59,530 --> 00:05:05,140
we get the name of the method where we use this parameter and then the index of that argument and that

65
00:05:05,140 --> 00:05:06,270
starts at 0.

66
00:05:06,280 --> 00:05:12,720
So the first argument has a number of 0 here an index of 0 and that's our parameter decorator.

67
00:05:12,790 --> 00:05:17,980
So these are all the places where we can add decorators and TypeScript and we can do various things

68
00:05:18,010 --> 00:05:18,610
with them.

69
00:05:18,610 --> 00:05:25,000
Now I will show you a couple of examples in this module here and I'll also show you libraries or frameworks

70
00:05:25,240 --> 00:05:31,510
that make heavy use of decorators and I'll show you what they do with decorators to give you an idea

71
00:05:31,510 --> 00:05:34,440
of the power that decorators can have.
