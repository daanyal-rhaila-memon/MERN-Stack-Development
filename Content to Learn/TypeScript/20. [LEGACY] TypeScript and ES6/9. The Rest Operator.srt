1
00:00:01,550 --> 00:00:08,690
So that's spread operator, the rest parameter as I said is closely connected to this and I'll have a

2
00:00:08,690 --> 00:00:10,670
look at it here.

3
00:00:10,880 --> 00:00:14,830
Imagine we're going to write our own function, makeArray

4
00:00:15,170 --> 00:00:23,480
and we expect to get some arguments which should be numbers but this should be a list of arguments,

5
00:00:23,480 --> 00:00:28,190
so I return args here and args should be an array.

6
00:00:28,190 --> 00:00:36,730
Now of course this doesn't work, I get a list of numbers here and I only have one element or one parameter,

7
00:00:36,740 --> 00:00:39,110
so I would only fetch the first value.

8
00:00:39,440 --> 00:00:46,820
Of course I could have something like arg1 and then arg2 which could be a number and then I could simply

9
00:00:46,820 --> 00:00:50,630
return arg, like this.

10
00:00:50,670 --> 00:00:59,490
So I would return an array and if I log this or if I call this makeArray function with 1 and 2, like

11
00:00:59,490 --> 00:01:05,310
this, then you would see I get an array with 1 and 2 but this is very cumbersome and of course well

12
00:01:05,570 --> 00:01:08,450
how do you create this function in a more flexible way,

13
00:01:08,490 --> 00:01:10,080
it only allows two values here

14
00:01:10,080 --> 00:01:13,360
but what if you don't know how many values you want?

15
00:01:13,410 --> 00:01:15,830
Well that of course would be an issue

16
00:01:16,170 --> 00:01:18,790
and therefore there is a simpler way. 

17
00:01:19,080 --> 00:01:23,700
I'll change this back to args and I will return args here.

18
00:01:23,700 --> 00:01:29,210
Now keep in mind, I want to return an array but here I want to get a list of elements.

19
00:01:29,220 --> 00:01:36,510
So first of all, that should be a flexible amount of or number of elements I get, could be 1, could be

20
00:01:36,510 --> 00:01:38,320
2, could be 100

21
00:01:38,520 --> 00:01:42,210
and also I want to turn them into an array.

22
00:01:42,750 --> 00:01:47,490
Well I can use the rest parameter and wonder how it looks?

23
00:01:47,520 --> 00:01:53,450
It looks like this, three dots and you would say wait, that's the spread operator, right?

24
00:01:53,700 --> 00:02:01,320
Well Javascript figures out or TypeScript here in our case figures out how to use this operator. If we

25
00:02:01,320 --> 00:02:09,090
use it in a function call, so we call a function and pass something to the function, then it will use

26
00:02:09,090 --> 00:02:16,860
the spread operator or then put in other words, three dots will mean spread because it will spread

27
00:02:16,860 --> 00:02:18,020
out an array.

28
00:02:18,240 --> 00:02:26,430
It won't turn a list of numbers into an array because that does not work because how should that look

29
00:02:26,430 --> 00:02:26,790
like,

30
00:02:26,790 --> 00:02:28,600
we can do something like this,

31
00:02:28,620 --> 00:02:29,240
right?

32
00:02:30,020 --> 00:02:34,560
It will not work because 3 and 5 would be separate arguments,

33
00:02:34,560 --> 00:02:41,640
the three dots would now only refer to the one. So that is why there is no other syntax available than just

34
00:02:41,670 --> 00:02:47,540
using three dots, one variable and that variable has to be an array.

35
00:02:47,550 --> 00:02:51,820
Now when we create our own function and we have three dots here,

36
00:02:52,290 --> 00:03:03,240
well then this means whatever args is and it can very well be multiple arguments, turn them into an array

37
00:03:03,950 --> 00:03:10,370
and therefore of course this has to be of type number array or an array of numbers because it will fetch

38
00:03:10,460 --> 00:03:13,250
all the parameters we pass to this makeArray function,

39
00:03:13,250 --> 00:03:19,800
for example two parameters in this case but could of course be three, like this.

40
00:03:19,880 --> 00:03:24,410
It will take all these parameters and put them into one array,

41
00:03:24,620 --> 00:03:29,760
so it kind of puts like square brackets around it, like this here.

42
00:03:31,090 --> 00:03:34,720
So really, the opposite of what the spread operator did

43
00:03:35,000 --> 00:03:40,500
and what it does simply depends on the place in the code where you use it.

44
00:03:40,550 --> 00:03:48,550
So with that if I save this, we see we get an array with 1, 2 and 6 inside of it because that is what

45
00:03:48,590 --> 00:03:50,060
I pass as values here

46
00:03:50,240 --> 00:03:54,920
and what the rest operator does with my arguments.

47
00:03:54,920 --> 00:04:01,280
Now of course an important thing to keep in mind is if you use the rest operator here in the function

48
00:04:01,280 --> 00:04:06,150
to combine your arguments, it will combine all the arguments.

49
00:04:06,200 --> 00:04:12,320
So if you have a function where you only want to combine some of the parameters passed to the function,

50
00:04:12,860 --> 00:04:18,330
then you would have to handle the not to be combined parameters first.

51
00:04:18,650 --> 00:04:25,280
So if I have something like a name parameter which should be a string, well then I would have to rewrite a

52
00:04:25,280 --> 00:04:30,310
function like this to still have it work the way I want it to work.

53
00:04:30,320 --> 00:04:35,360
So you see, I still get that array, name is simply ignored because I'm not doing anything with it

54
00:04:35,420 --> 00:04:39,930
but it also doesn't conflict with my rest parameter here.

55
00:04:41,140 --> 00:04:48,260
So that is the rest parameter and that before was the spread parameter or operator, excuse me, operator

56
00:04:48,280 --> 00:04:49,040
not parameter,

57
00:04:49,040 --> 00:04:57,950
rest and spread operators. Really useful operators for working with arrays or lists of values

58
00:04:57,970 --> 00:05:02,320
and of course values does not only mean numbers like in examples here,

59
00:05:02,590 --> 00:05:10,870
you could have any values which you want to either combine into an array with the rest operator or split

60
00:05:10,930 --> 00:05:14,690
up into a list of values with the spread operator.
