1
00:00:01,630 --> 00:00:04,020
Time for some exercises again.

2
00:00:04,330 --> 00:00:09,830
Now these exercises look very complex but I think they're all very doable.

3
00:00:09,850 --> 00:00:15,430
The first exercise here is about the basic class object,

4
00:00:15,460 --> 00:00:17,530
nothing special about it.

5
00:00:17,560 --> 00:00:24,690
The goal is to take this vanilla Javascript constructor function here which we used in vanilla

6
00:00:24,830 --> 00:00:34,070
Javascript to create objects based on a blueprint and we create it in TypeScript with the class keyword.

7
00:00:34,180 --> 00:00:37,120
Now I created solutions TypeScript file

8
00:00:37,120 --> 00:00:40,100
and I wanted to show one possible solution to this,

9
00:00:40,120 --> 00:00:49,740
so Exercise 1 - Class. Well I create the car object because we create a car object here too

10
00:00:52,700 --> 00:00:59,060
and provide some or car class here and provide some information about this class.

11
00:00:59,230 --> 00:01:06,870
We want to have a string or a name which is a string and we have the acceleration which should be a

12
00:01:06,880 --> 00:01:08,430
number and equals zero

13
00:01:08,440 --> 00:01:11,950
and of course this type definition here wouldn't be needed,

14
00:01:11,950 --> 00:01:17,010
Typescript can infer the type because we set it here.

15
00:01:17,130 --> 00:01:18,450
So that's the acceleration,

16
00:01:18,450 --> 00:01:21,570
then we have the constructor where we pass this name

17
00:01:21,570 --> 00:01:27,360
and yes, I confuse the shorter way of initializing and creating this name property.

18
00:01:27,360 --> 00:01:29,830
So I set name equal to name here,

19
00:01:30,300 --> 00:01:32,700
then we have the honk method

20
00:01:34,200 --> 00:01:41,140
where I can hit the honk, toooooot, like that

21
00:01:41,350 --> 00:01:50,470
and then I have the accelerate method where I pass a certain speed by which I want to accelerate and

22
00:01:50,470 --> 00:01:56,130
then I set this acceleration equal to this acceleration

23
00:01:57,350 --> 00:01:59,540
plus speed, like this,

24
00:01:59,880 --> 00:02:01,580
not sped, speed.

25
00:02:01,850 --> 00:02:02,490
OK,

26
00:02:02,850 --> 00:02:04,260
so that's my class

27
00:02:04,500 --> 00:02:11,160
and then I can simply create a new object based on this class, pass a name to it, like BMW which

28
00:02:11,200 --> 00:02:13,280
yes the brand, not the name of a car

29
00:02:13,290 --> 00:02:23,440
but you get my point and then, I may honk, I could also simply then log my current acceleration level,

30
00:02:24,690 --> 00:02:32,510
duplicate this but before calling it a second time, I will call the accelerate method here and pass an

31
00:02:32,510 --> 00:02:41,660
acceleration of 20. With all that in place, I can compile this file by typing tsc solution.ts and

32
00:02:41,660 --> 00:02:47,990
have a look at the running browser where I change the import in the index.html file to solutions

33
00:02:48,110 --> 00:02:58,040
Javascript and well, clear this, reload, we see toooooot, then the initial acceleration of 0 and then 20

34
00:02:58,280 --> 00:03:05,090
and that is how you use all the knowledge from the previous module to create a new class with some public

35
00:03:05,110 --> 00:03:13,730
properties, some public methods and a constructor with the longer way of initializing my property here

36
00:03:14,120 --> 00:03:23,550
and then use all these features to create a new object, call the methods or access some properties.

37
00:03:24,230 --> 00:03:25,670
So that was very basic,

38
00:03:25,670 --> 00:03:29,110
just a quick refresher on how to use the class keyword,

39
00:03:29,210 --> 00:03:35,330
the most important thing if you have an ES6 background there of course was that you can create your

40
00:03:35,330 --> 00:03:41,330
properties directly in the class body and don't have to create them in the constructor.

41
00:03:41,330 --> 00:03:42,820
Now back to the exercises,

42
00:03:42,860 --> 00:03:48,920
let's have a look at the second exercise which looks rather short but is more difficult than the first

43
00:03:48,920 --> 00:03:51,330
one but should be doable too,

44
00:03:51,710 --> 00:03:58,910
the goal was to extend or to implement inheritance. In vanilla Javascript,

45
00:03:58,910 --> 00:04:05,660
there are a couple of ways to do this because there is is rather strange concept of inheritance using

46
00:04:05,660 --> 00:04:06,980
prototypes,

47
00:04:06,980 --> 00:04:13,810
not really strange but less intuitive than the extends keyword in TypeScript probably.

48
00:04:13,850 --> 00:04:20,150
So one way to implement inheritance in vanilla Javascript was to have the space object, then create

49
00:04:20,150 --> 00:04:28,140
a new object with object create which will set base object as the prototype of this object

50
00:04:28,400 --> 00:04:35,630
here, therefore I have access to width and length on this object as it is based on this object and I can

51
00:04:35,630 --> 00:04:43,820
extend it by adding a new function like this here and then call this function which uses my properties

52
00:04:43,820 --> 00:04:46,070
I got through extension.

53
00:04:46,350 --> 00:04:50,950
So that's all nice but we can also write this in TypeScript,

54
00:04:50,970 --> 00:05:00,270
so let me add Exercise 2 - Inheritance to the solution file. I want to create my base class here

55
00:05:01,340 --> 00:05:04,160
or my base object, let's call it like it is,

56
00:05:05,260 --> 00:05:09,870
which looks like this, has a width of zero and length

57
00:05:09,880 --> 00:05:19,590
and I'm skipping the type declarations as TypeScript can infer the type. Then I'm creating my rectangle

58
00:05:19,590 --> 00:05:27,990
class which should extend my base object, so the extends keyword here is key to make sure that this

59
00:05:27,990 --> 00:05:36,500
rectangle class has access to width and length and it will always have access to these two properties unless

60
00:05:36,500 --> 00:05:38,290
they are marked private.

61
00:05:38,390 --> 00:05:39,290
It has access

62
00:05:39,290 --> 00:05:48,440
if they are public or protected. So here, I then implement my new method, calcSize and all I want to

63
00:05:48,440 --> 00:05:53,050
do here is I will return this width times

64
00:05:53,060 --> 00:06:03,680
this length, like so. I can then create a new object based on the rectangle class, rectangle should be

65
00:06:03,680 --> 00:06:04,920
new Rectangle

66
00:06:06,430 --> 00:06:15,750
and I can then set the width to let's say 5 and I can set rectangle length to 10 maybe

67
00:06:16,050 --> 00:06:23,160
and then I can log the rectangle or the result of the calcSize method.

68
00:06:23,730 --> 00:06:32,670
So if I save this and recompile the solutions file, well we see 50 here and 50 of course makes sense

69
00:06:32,670 --> 00:06:39,580
because 50 is what I log here with calcSize, since it is five times ten.

70
00:06:39,840 --> 00:06:48,000
The last exercise shows how getters and setters could be implemented in vanilla Javascript even before

71
00:06:48,070 --> 00:06:57,390
ES6 with the defined property method on the global object object. With defined property, we could add

72
00:06:57,390 --> 00:07:05,440
new properties to an object, define the property name here and then configure the property in this Javascript

73
00:07:05,640 --> 00:07:08,050
object passed as a second or

74
00:07:08,280 --> 00:07:15,210
excuse me, as a third argument to the defined property method. There we could set up getters and setters

75
00:07:15,210 --> 00:07:22,290
like this and actually, get and set then is not that different to the TypeScript implementation

76
00:07:22,500 --> 00:07:28,170
but of course that's a very difficult way to write this and you will see that TypeScript offers a more

77
00:07:28,170 --> 00:07:31,920
convenient way to set up setters and getters,

78
00:07:31,950 --> 00:07:35,370
so Exercise 3 is about getters and setters.

79
00:07:38,500 --> 00:07:46,040
So I'll create a new class, person here and I have this private property, _firstName which I don't want

80
00:07:46,040 --> 00:07:48,740
to be able to access from outside,

81
00:07:49,030 --> 00:07:52,660
this should be a string and by default, it's an empty string.

82
00:07:52,790 --> 00:07:59,450
So I have the underscore here again because I'll implement a getter and a setter. The getter will control

83
00:07:59,450 --> 00:08:01,330
how I can access this property

84
00:08:01,370 --> 00:08:07,860
and I defined with the get keyword here, followed by the property I want to use from outside, firstName

85
00:08:07,940 --> 00:08:10,610
and then followed by parentheses,

86
00:08:10,760 --> 00:08:12,100
so like a method call.

87
00:08:12,140 --> 00:08:17,010
But again, remember this from the module earlier or from the lecture earlier,

88
00:08:17,030 --> 00:08:20,710
you don't call it like a method, you call it like a property,

89
00:08:20,750 --> 00:08:24,970
it only looks like a method inside of this class here.

90
00:08:25,100 --> 00:08:29,360
So here, I will simply return this firstName,

91
00:08:29,360 --> 00:08:35,120
I could do more with that, I could check something, I could transform it but here I'll just return it

92
00:08:35,390 --> 00:08:41,900
and then I will set up a setter with the set keyword and then also firstName, again will be accessed

93
00:08:41,900 --> 00:08:43,340
like a property from outside

94
00:08:43,340 --> 00:08:50,740
and of course has to match the name of the getter in this case and then I will get this value passed

95
00:08:50,750 --> 00:08:59,570
to this automatically created method here kind of. Then I want to check if the length of value is

96
00:08:59,570 --> 00:09:01,000
greater than 3,

97
00:09:01,220 --> 00:09:09,410
if this is the case I will set this firstName equal to first name, not isFinit, to value excuse

98
00:09:09,410 --> 00:09:15,200
me, otherwise because name is shorter than three characters,

99
00:09:15,400 --> 00:09:16,380
yes that happens

100
00:09:16,390 --> 00:09:18,740
but this person shouldn't have one.

101
00:09:18,820 --> 00:09:25,120
So in this case, I would set this firstName equal to an empty string still, so basically it isn't

102
00:09:25,120 --> 00:09:25,570
changed,

103
00:09:25,590 --> 00:09:28,390
I could also just skip this else condition

104
00:09:28,420 --> 00:09:35,510
but I want to show how you could set something in an else case. With that, I can create a new person

105
00:09:35,530 --> 00:09:36,890
here, new 

106
00:09:40,300 --> 00:09:45,430
Person, like that and I can simply log person firstName for example,

107
00:09:48,590 --> 00:10:03,150
then I can try to set the first name of that person to let's say Ma, then I'll log the first name again.

108
00:10:04,080 --> 00:10:12,110
I'll also log it again but in between those logs, I'll set it again equal to Maximillian which is my full first

109
00:10:12,110 --> 00:10:13,250
name.

110
00:10:13,250 --> 00:10:16,160
Now if I save this and recompile this file,

111
00:10:18,920 --> 00:10:27,490
I get this compilation error which is because when I compile a single file and I'm doing this with the tsc

112
00:10:27,500 --> 00:10:32,770
solutions.ts command because I don't want to compile all the files which would give me other errors

113
00:10:33,470 --> 00:10:41,900
because I have some duplicate names here in both files. If I only compile one single file, this

114
00:10:41,900 --> 00:10:45,750
tsconfig.json does not really apply,

115
00:10:46,070 --> 00:10:53,870
which generally isn't a problem but in this case, I want to make sure that I'm not compiling to the default

116
00:10:54,050 --> 00:11:02,420
Javascript version which would be ES3 but instead, I want to compile to ES5 because ES5 will

117
00:11:02,780 --> 00:11:11,330
support getters and setters, ES3 will not. I do this by adding the -t option and then simply the ES5, 

118
00:11:11,330 --> 00:11:12,410
like this,

119
00:11:12,410 --> 00:11:19,900
capital E, capital S and 5. That will tell the TypeScript compiler that it should compile it

120
00:11:19,920 --> 00:11:26,000
to ES5 Javascript code and not to ES3 Javascript code which therefore will work without any

121
00:11:26,000 --> 00:11:27,660
errors.

122
00:11:27,770 --> 00:11:35,510
We didn't have to do this earlier because if you just compile with just tsc, the tsconfig is used

123
00:11:35,780 --> 00:11:38,330
in which the target is set to ES5

124
00:11:38,540 --> 00:11:42,650
but for single files, we have to do this on our own here.

125
00:11:43,100 --> 00:11:45,360
Well, let's have a look at the console now.

126
00:11:45,410 --> 00:11:53,140
Remember this code here? Well we see this old code which is still from the acceleration and so on

127
00:11:53,710 --> 00:11:59,290
and then we have nothing, empty string, empty string, Maximillian.

128
00:11:59,390 --> 00:12:04,540
So the first empty string comes from this console log where I log the name

129
00:12:04,540 --> 00:12:08,740
before doing anything with it and the default of course is an empty string.

130
00:12:09,070 --> 00:12:15,280
So I'm accessing my getter here by calling firstName and not _firstName which wouldn't

131
00:12:15,280 --> 00:12:17,650
work because it's a private property

132
00:12:18,250 --> 00:12:22,410
and this just returns me the private property first name, so it works

133
00:12:23,110 --> 00:12:25,360
and that is why we see this empty string.

134
00:12:25,780 --> 00:12:31,580
Then I try to set a name, Ma and I'm calling firstName not _firstName

135
00:12:31,660 --> 00:12:34,010
which leads me to this setter.

136
00:12:34,030 --> 00:12:42,100
I pass the value, Ma and I don't make it through this check, which is why the first name still is empty

137
00:12:42,100 --> 00:12:42,840
string.

138
00:12:44,180 --> 00:12:50,240
And then, I set first name again or before doing that, I log it

139
00:12:50,240 --> 00:12:52,490
which is why I again see an empty string,

140
00:12:54,440 --> 00:13:00,830
then I set firstName again, this time to Maximillian which makes it through this check and therefore

141
00:13:00,890 --> 00:13:07,490
the _firstName, this private property is set to Maximilian, which is after calling

142
00:13:07,490 --> 00:13:08,900
it for the third time,

143
00:13:09,140 --> 00:13:12,360
I see Maximillian here in the console.

144
00:13:12,950 --> 00:13:20,600
So these were all the exercises concerning the classes here and I hope you feel comfortable using the

145
00:13:20,600 --> 00:13:24,450
TypeScript class keywords and class concept by now.
