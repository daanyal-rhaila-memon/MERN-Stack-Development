1
00:00:02,370 --> 00:00:08,680
Speaking of more generic types as a little bonus you could say on one point your direction.

2
00:00:08,730 --> 00:00:17,250
Add a couple of built in types TIBCO chips with which utilize generic types or which are generic types

3
00:00:17,250 --> 00:00:20,390
to give us certain utility functionalities.

4
00:00:20,410 --> 00:00:25,560
There is a little bonus here and from time to time these special types might come in handy.

5
00:00:25,590 --> 00:00:31,160
Now it helps to find a link to the full documentation of all the built in utility types here.

6
00:00:31,170 --> 00:00:38,040
I just want to give you a few examples now just as all these type things these types only exist in types

7
00:00:38,040 --> 00:00:41,180
of the world and therefore only prior to copulation.

8
00:00:41,280 --> 00:00:48,130
But during this compilation step they can give you extra type safety or extra flexibility.

9
00:00:48,150 --> 00:00:51,650
For example there's two built in partial type.

10
00:00:51,720 --> 00:00:57,120
Let's say we have a new type a new interface which we define or a custom type.

11
00:00:57,120 --> 00:00:58,440
Really doesn't matter.

12
00:00:58,470 --> 00:01:04,920
Course goal the course gold does have a title which should be a string.

13
00:01:04,950 --> 00:01:13,520
And let's say a description which should all be a string maybe we also have a com pleat until property

14
00:01:13,520 --> 00:01:15,320
which is a date.

15
00:01:15,330 --> 00:01:21,530
Now we want to have a function let's say create course goal which creates us such a object.

16
00:01:21,540 --> 00:01:26,310
Of course we could have created a class as well but we have such a function because in that function

17
00:01:26,310 --> 00:01:32,620
we might be drawing in some data from a database or whatever it is so we have this function and in the

18
00:01:32,620 --> 00:01:43,090
end here I want to get my title which is a string I might get my description which is a string and I

19
00:01:43,090 --> 00:01:47,180
hopefully get my date which is a date.

20
00:01:47,180 --> 00:01:52,010
Now in that function of course we could return an object but we just set up all these things or so where

21
00:01:52,010 --> 00:01:57,850
we set title to title description to description and complete until to date.

22
00:01:57,850 --> 00:02:04,070
We could do all of that and if we then to find that this function will always return a course goal we

23
00:02:04,070 --> 00:02:06,860
would have a correctly setup function.

24
00:02:07,130 --> 00:02:11,500
Now for some reason that say we're not doing it like this though we're not doing this all in one step

25
00:02:12,740 --> 00:02:18,630
instead what I want to do is I want to start by creating a variable here which holds an empty object

26
00:02:18,810 --> 00:02:27,720
and then step by step I want to add my title here I want to add my description here and I want to add

27
00:02:29,780 --> 00:02:38,390
my date here now here I'm getting errors because of course a concert titled Is this not a property of

28
00:02:38,390 --> 00:02:39,250
this object.

29
00:02:39,290 --> 00:02:45,140
And while this works in vanilla javascript typescript doesn't really like that on the fly adding here

30
00:02:45,500 --> 00:02:49,230
so we might want to say that this should be of type course goal here.

31
00:02:49,340 --> 00:02:54,230
Now typescript is not complaining about this but about the fact that this is an empty object which clearly

32
00:02:54,230 --> 00:02:57,080
is not fitting our type here.

33
00:02:57,110 --> 00:03:01,940
So in the end I want to return to that I want to add all these things step by step maybe because we

34
00:03:01,940 --> 00:03:04,450
have extra validation before each step.

35
00:03:04,610 --> 00:03:07,540
And Dave for want to add it like this.

36
00:03:07,640 --> 00:03:16,230
Now here's where the partial type can come in handy we could set a course goal here should be a partial

37
00:03:16,230 --> 00:03:21,630
type which in the end thanks to generic types will hold a course goal.

38
00:03:21,630 --> 00:03:27,750
Now what this does is it tells typescript that this is an object which in the end will be a course goal

39
00:03:28,260 --> 00:03:35,760
but initially partial kind of wraps our own type and changes it to a type where all these properties

40
00:03:35,820 --> 00:03:36,650
are optional.

41
00:03:36,660 --> 00:03:40,670
That's what partial does one of these built in types TIBCO chips with.

42
00:03:40,710 --> 00:03:46,620
So it turns this into a type which is all an object type where all the properties are optional therefore

43
00:03:46,650 --> 00:03:53,070
we can set this to an empty object initially and still add all these things step by step.

44
00:03:53,070 --> 00:03:59,310
The only problem is that in the end we can't return this because now it's still of type partial course

45
00:03:59,310 --> 00:04:01,890
goal and not type core skill.

46
00:04:02,190 --> 00:04:07,080
We can fix this by converting this to chorus goal with typecasting because we know at this point of

47
00:04:07,080 --> 00:04:12,120
time we will have added all the data so it will be a real core goal and not a partial one.

48
00:04:12,120 --> 00:04:17,490
And of course this is a bit made up but you could have scenarios like this where you want to temporarily

49
00:04:17,760 --> 00:04:24,630
switch one of your object types one of your interfaces to be optional only to make sure that all the

50
00:04:24,630 --> 00:04:30,720
properties and data can be optional only temporarily and then the partial type would allow you to do

51
00:04:30,720 --> 00:04:35,090
that and no built in utility type.

52
00:04:35,090 --> 00:04:39,720
What you have is the read only type that can all be very useful.

53
00:04:40,220 --> 00:04:48,060
Let's say we have an array of names in there I got Max and sports now correctly typescript infers that

54
00:04:48,060 --> 00:04:49,870
this is a String array.

55
00:04:49,920 --> 00:04:50,950
Now what can we do.

56
00:04:51,000 --> 00:04:58,670
We can of course push manual on there and probably I should change this too and not sports to have a

57
00:04:58,670 --> 00:04:59,630
name in there.

58
00:04:59,780 --> 00:05:00,410
So this works.

59
00:05:00,410 --> 00:05:06,500
Now let's say however I want to make sure that this is a locked array we can't add more here that we

60
00:05:06,500 --> 00:05:11,650
can always add more here but at least I want typescript to yell at me if I try it.

61
00:05:11,720 --> 00:05:13,760
Well that's where we can use to read only type.

62
00:05:13,760 --> 00:05:18,990
We could set this to read only string array.

63
00:05:18,990 --> 00:05:23,880
With that we tell typescript Well what we story here is a it's an array of strings but it's also an

64
00:05:23,880 --> 00:05:25,840
array of strings which is read only.

65
00:05:25,890 --> 00:05:32,660
So when we try to add something with push or if we tried to remove something with Pop we get errors

66
00:05:32,790 --> 00:05:36,340
because we're not allowed to do these things with this array.

67
00:05:36,480 --> 00:05:38,790
And this is not limited to erase right away.

68
00:05:38,820 --> 00:05:45,210
You can also use read only on an object for example to market as read only so that you're not allowed

69
00:05:45,210 --> 00:05:49,980
to change the properties or add new properties to this object.

70
00:05:49,980 --> 00:05:57,750
So this can all be very very handy and give you more flexibility or be more precise about what you're

71
00:05:57,870 --> 00:05:59,550
aiming to do in your code.

72
00:05:59,550 --> 00:06:04,980
Now all these are just utility types that only exist in typescript world so they're not compiled to

73
00:06:04,980 --> 00:06:12,420
anything but during compilation they give you extra strictness or extra checks or skip certain checks

74
00:06:12,450 --> 00:06:14,850
as we did it with partial.

75
00:06:14,850 --> 00:06:19,500
Now you've got more than read only in partial and as I mentioned attached you find the documentation

76
00:06:19,500 --> 00:06:26,220
to a full list of these utility types in certain scenarios they can come in really handy and therefore

77
00:06:26,220 --> 00:06:30,600
I definitely did not want to hide them from you but instead you should be aware of them so that you

78
00:06:30,600 --> 00:06:34,080
can use them when you need to lock something down.

79
00:06:34,080 --> 00:06:39,710
Or as Nic has a partial open anything up or with all the other ones which I didn't discuss here.

80
00:06:39,750 --> 00:06:45,330
If you've got some other operation which can be enhanced with one of these built in utility types and

81
00:06:45,330 --> 00:06:52,200
these utility types are all generic because what they do is they take some other value which is of any

82
00:06:52,200 --> 00:06:54,070
type and do something with it.

83
00:06:54,210 --> 00:07:01,350
They set everything to optional they lock it down not caring about whether this is an array or object

84
00:07:01,350 --> 00:07:04,440
or an array of strings array of numbers and so on.

85
00:07:04,440 --> 00:07:09,960
That's why these are generic and to gather with the other built in generics we saw earlier and your

86
00:07:09,960 --> 00:07:15,840
own generics does now hopefully all that again helps you understand why generics can be useful in why

87
00:07:15,840 --> 00:07:16,620
they exist.
