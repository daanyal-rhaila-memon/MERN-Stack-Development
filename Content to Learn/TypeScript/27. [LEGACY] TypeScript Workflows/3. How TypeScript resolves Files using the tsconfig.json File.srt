1
00:00:01,440 --> 00:00:03,950
So what does the tsc command do

2
00:00:03,990 --> 00:00:12,320
if we run it like this? Well it basically looks for the tsconfig.json file and then read said

3
00:00:12,360 --> 00:00:14,610
to learn how it should behave.

4
00:00:14,610 --> 00:00:21,090
Now here in this sample, tsconfig.json file which is pretty much the default tsconfig.json

5
00:00:21,110 --> 00:00:27,500
file you automatically create by running tsc --init, in this file

6
00:00:27,500 --> 00:00:32,490
here, we learn that we got some compiler options and then we have the exclude node.

7
00:00:32,790 --> 00:00:40,260
Now what this file tells the TypeScript command, the TypeScript compiler command is that it should compile all

8
00:00:40,260 --> 00:00:48,990
TypeScript files in this folder, except for any files in the node_modules folder, which we can see here,

9
00:00:49,080 --> 00:00:53,150
which basically holds the lite-server and so on and the set up.

10
00:00:53,340 --> 00:01:02,230
So all other files in all other folders in this project folder will be considered during compilation.

11
00:01:02,250 --> 00:01:09,990
This is the reason why in our app.ts file, we automatically detect the JQuery typings which

12
00:01:09,990 --> 00:01:11,780
live in the typings folder,

13
00:01:11,850 --> 00:01:19,230
remember we set them up in the third-party modules module in this course. We never import the index.d.ts file

14
00:01:19,230 --> 00:01:24,700
which refers to the JQuery typings, we never import this in the app.ts file,

15
00:01:24,930 --> 00:01:32,400
it gets found automatically by TypeScript simply because we only specify what not to include, the node

16
00:01:32,400 --> 00:01:38,500
modules folder but all other folders are taken into account and therefore TypeScript recognizes

17
00:01:38,500 --> 00:01:40,940
OK I have this app.ts file,

18
00:01:40,950 --> 00:01:44,420
it's the only ts file so I'm only going to compile this file,

19
00:01:44,520 --> 00:01:51,430
if we had other ts files, it would also compile those files and then it also finds the .d.ts files

20
00:01:51,450 --> 00:01:57,360
Now it won't compile them because it recognizes that .d.ts is not a file that should be

21
00:01:57,360 --> 00:02:03,630
compiled but a file which holds some definitions and should be taking into account during compilation and

22
00:02:03,630 --> 00:02:11,030
it does so, it takes this file into account which then references the JQuery typings in this case here

23
00:02:11,430 --> 00:02:17,620
and therefore, it knows about these definitions when compiling the app.ts file here.

24
00:02:17,760 --> 00:02:24,840
So this is how it knows how to work with your directory, with your project and which files to take into

25
00:02:24,840 --> 00:02:32,100
account and therefore by simply adding exclude here, we'll let TypeScript do the rest for us and only

26
00:02:32,100 --> 00:02:34,050
tell it what not to use.

27
00:02:34,140 --> 00:02:37,150
Now why do we exclude the node_modules folder?

28
00:02:37,380 --> 00:02:39,440
The reason for this simply is

29
00:02:39,610 --> 00:02:46,890
there are a lot of third-party libraries or packages by other creators and we probably don't

30
00:02:46,890 --> 00:02:48,480
want to recompile those,

31
00:02:48,540 --> 00:02:52,890
those packages should ship in a finished mode, in a finished version.

32
00:02:53,280 --> 00:02:55,590
We don't need to recompile these packages,

33
00:02:55,710 --> 00:02:58,200
so we definitely want to exclude them.

34
00:02:58,320 --> 00:03:05,540
We are including certain things like JQuery explicitly with the import statement here, which then

35
00:03:05,550 --> 00:03:11,610
again of course is used or is considered when compiling this here but it's not recompiled because we

36
00:03:11,610 --> 00:03:13,140
don't want to do this.

37
00:03:13,160 --> 00:03:20,190
An alternative to excluding would be to instead explicitly tell it what to include,

38
00:03:20,190 --> 00:03:23,290
we can do this with the files node here.

39
00:03:23,550 --> 00:03:26,750
So we're simply adding files which would then also be an array,

40
00:03:26,760 --> 00:03:31,330
now in this array we could simply tell TypeScript to use the app.ts file.

41
00:03:31,350 --> 00:03:33,690
Now if I now run tsc,

42
00:03:33,690 --> 00:03:37,050
it only takes the app.ts file into account

43
00:03:37,050 --> 00:03:44,220
which is why I get this error that we can't find dollar sign because now all of a sudden, the typings

44
00:03:44,310 --> 00:03:50,550
in the typings folder here are no longer considered, those .d.ts files here are no longer considered

45
00:03:50,790 --> 00:03:55,260
because they are not automatically scanning for all the ts or .d.ts files,

46
00:03:55,350 --> 00:03:58,400
we're only considering the files I specify here

47
00:03:58,650 --> 00:04:01,480
and that's just the app.ts file.

48
00:04:01,560 --> 00:04:10,070
So one way to get this working is to simply add the typings folder and then the index.d.ts file which

49
00:04:10,340 --> 00:04:14,220
basically holds the JQuery typings

50
00:04:14,450 --> 00:04:18,800
and we may also specify the extension here of course.

51
00:04:18,800 --> 00:04:20,380
So if I now run tsc again,

52
00:04:20,390 --> 00:04:26,610
we now no longer get the error because now the typings in the typings folder are again taking into account

53
00:04:26,640 --> 00:04:30,980
but we tell TypeScript explicitly that we want to do this.

54
00:04:31,100 --> 00:04:37,010
So this is how you can control which files are taken into account when you run the tsc command, with files

55
00:04:37,040 --> 00:04:43,370
and exclude, you can control what you compile and what to include in the compilation step and what not

56
00:04:43,370 --> 00:04:44,490
to look at.

57
00:04:44,540 --> 00:04:49,430
Again if you want to learn more about this, you can also check out the official documentation where some

58
00:04:49,430 --> 00:04:57,260
additional examples are given and the exclude and files node is again explained, also add how the compiler

59
00:04:57,260 --> 00:04:59,770
behaves when looking for files.

60
00:04:59,840 --> 00:05:06,530
Generally, you should keep in mind that if you don't specify the files node here, it will take all files

61
00:05:06,530 --> 00:05:07,830
into account,

62
00:05:08,000 --> 00:05:13,820
then you can be a bit more precise by adding exclude and for example excluding the node_modules folder,

63
00:05:13,820 --> 00:05:19,610
so a complete folder and all its files in this folder by just specifying the top root or the

64
00:05:19,640 --> 00:05:23,740
top level folder here and that you can be specific with

65
00:05:23,810 --> 00:05:29,090
the files node and just tell it what to use, which files to specifically use

66
00:05:29,090 --> 00:05:32,280
if you don't want to use the more general approach taken here.

67
00:05:32,540 --> 00:05:38,000
It really depends on your project, which set up you want to use, tell it which files to take into account

68
00:05:38,300 --> 00:05:43,530
or use all files and only exclude some folders, like in this case here.

69
00:05:43,910 --> 00:05:51,710
Generally, it will always look for .ts and .d.ts files, so these definition files here when compiling

70
00:05:51,710 --> 00:05:52,440
your project.
