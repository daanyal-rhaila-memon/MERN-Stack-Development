1
00:00:02,000 --> 00:00:07,540
So let's write this function in a better generic way.

2
00:00:07,880 --> 00:00:16,880
So here the betterEcho function would be also getting data as an input but now I'm making this a

3
00:00:16,880 --> 00:00:20,110
generic and I'm doing this with the following syntax.

4
00:00:20,390 --> 00:00:28,040
I enter the lower than or smaller than sign, then any character of your choice, typically you choose

5
00:00:28,040 --> 00:00:33,330
an uppercase T for that, for type but you can take any character you want,

6
00:00:33,330 --> 00:00:35,990
you don't have to use an uppercase character here

7
00:00:36,260 --> 00:00:38,400
and then the greater than sign.

8
00:00:38,450 --> 00:00:43,170
Now this strange construct here makes this a generic function,

9
00:00:43,190 --> 00:00:47,140
it tells TypeScript that this is a generic function

10
00:00:47,420 --> 00:00:54,680
and with this T character here, we're telling TypeScript hey when using this function, give me the 

11
00:00:54,680 --> 00:00:55,320
type

12
00:00:55,520 --> 00:01:01,660
and then I will be able to use this type. Therefore we can now use T here as a type

13
00:01:01,670 --> 00:01:08,060
and we know the data we get will be of type T because again, that's what we will assign when using this

14
00:01:08,060 --> 00:01:09,380
function.

15
00:01:09,380 --> 00:01:16,020
Now with that, I can still return data here and now I'm copying my three console logs from above here

16
00:01:16,400 --> 00:01:25,090
and let's see. If I change the echo here to the betterEcho,

17
00:01:25,100 --> 00:01:33,830
now you can see if I press the dot after this, I get the better IDE support and I can access length.

18
00:01:33,830 --> 00:01:40,250
Now if I go down to my number and enter betterEcho like this,

19
00:01:40,400 --> 00:01:42,810
now I don't have the length property

20
00:01:43,100 --> 00:01:49,720
and if I try to use length here, let's have a look at the TypeScript console,

21
00:01:49,770 --> 00:01:55,950
you see I'm getting an error that property length does not exist on type number and that is exactly

22
00:01:55,950 --> 00:01:56,740
what I want.

23
00:01:56,910 --> 00:02:03,840
Now with this set up here, I do have a generic function, I can use a number but I can't use the length

24
00:02:03,840 --> 00:02:05,950
property on it thereafter.

25
00:02:06,210 --> 00:02:15,870
So if I save this and have a look now at the output, you see I'm still getting three for the length of my

26
00:02:15,870 --> 00:02:22,980
Max string, then 27 and then the object, so all the types work but since TypeScript is aware of the result

27
00:02:23,010 --> 00:02:28,950
type, I can't do any operations with it that aren't supported by that type.

28
00:02:28,950 --> 00:02:34,560
By the way, you can also explicitly state which type you will use in this function.

29
00:02:34,620 --> 00:02:40,760
Right now, TypeScript is inferring it by the type of the argument but it could also state number here,

30
00:02:40,890 --> 00:02:45,200
also contained in these smaller and greater than signs.

31
00:02:45,210 --> 00:02:52,090
So with that, I would make clear that I want to have a number and if I then pass let's say a string here,

32
00:02:52,170 --> 00:02:54,610
I would also get a TypeScript error

33
00:02:54,750 --> 00:03:01,770
as you can see because I explicitly said that this would be a generic function using the number type

34
00:03:02,010 --> 00:03:10,580
but the data I'm passing doesn't match this type and that is why types or generic types, generic functions,

35
00:03:10,590 --> 00:03:19,160
generics in general are a powerful tool to improve your code, make your code both flexible and yet manageable

36
00:03:19,170 --> 00:03:20,760
by the TypeScript compiler.
