1

00:00:01,790  -->  00:00:11,840
So time to solve this exercise, I'll create a new TypeScript file, solution and in the index.html, I'm

2

00:00:11,840  -->  00:00:17,650
loading the solution.js file here with my module loader which I still have in place

3

00:00:17,660  -->  00:00:21,260
but you could use a script tag here too since we're not really using modules

4

00:00:21,410  -->  00:00:30,890
and the exercise was certainly difficult to create a generic map class. So a map is basically a collection

5

00:00:30,920  -->  00:00:36,950
object where you stored key-value pairs, like an object in Javascript.

6

00:00:37,220  -->  00:00:43,530
So let's create this, I'll name it MyMap, it should be a generic class, any type could be hold

7

00:00:43,550  -->  00:00:45,790
so no constraints are specified

8

00:00:46,250  -->  00:00:52,640
and then I have a private property, map which will be my internal storage in this class and this map

9

00:00:52,640  -->  00:00:56,490
here should be of type object

10

00:00:56,510  -->  00:01:04,520
where this object in turn has a key, which is type string, so just saying it should have a

11

00:01:04,520  -->  00:01:06,640
key here of this type,

12

00:01:06,650  -->  00:01:08,240
this has nothing to do with an array

13

00:01:08,240  -->  00:01:15,890
again, remember this, we had this before in another module and the value stored for this key should be of

14

00:01:15,890  -->  00:01:16,920
type T,

15

00:01:16,940  -->  00:01:23,450
so this generic type set up for this class and then I'm just assigning this to be an empty object at

16

00:01:23,450  -->  00:01:24,110
the beginning.

17

00:01:25,150  -->  00:01:29,990
Now with this, I will add four methods here to this class,

18

00:01:30,100  -->  00:01:34,840
the setItem method which allows me to store a new key-value pair.

19

00:01:34,930  -->  00:01:46,320
Now setItem takes a key of type string as you again can see here and then the item of type T,

20

00:01:46,330  -->  00:01:48,710
so of the generic type of this map.

21

00:01:48,730  -->  00:01:54,950
So this map will only be able to hold either numbers or strings or whatever but not mixed

22

00:01:55,180  -->  00:01:58,610
objects or values.

23

00:01:58,660  -->  00:02:04,810
So with that, I then access MyMap, access this key here and set it equal to item

24

00:02:04,810  -->  00:02:09,680
and yes I'm deliberately overwriting any existing items with that key,

25

00:02:09,820  -->  00:02:12,230
so a map will store key-value pairs,

26

00:02:12,250  -->  00:02:14,570
so each key can only appear once

27

00:02:14,590  -->  00:02:18,000
so overwriting is the only behavior which makes sense here.

28

00:02:18,490  -->  00:02:25,360
I also add the getItem method where I specify the string which I or the key for which I want

29

00:02:25,360  -->  00:02:26,830
to get the value back

30

00:02:27,100  -->  00:02:33,790
and here I will simply return this map and then access this key. Of course if this key doesn't exist, I'll get

31

00:02:33,790  -->  00:02:38,520
an error but I'll leave out any complicated error handling logic for now.

32

00:02:39,220  -->  00:02:47,650
I'll add a clear method where I then want to simply set this map equal to an empty object again to

33

00:02:47,650  -->  00:02:48,390
clear it

34

00:02:48,430  -->  00:02:57,190
and of course map is no function, little mistake here and then I'll add the printMap method which simply

35

00:02:57,190  -->  00:02:59,430
should print out the complete map.

36

00:02:59,470  -->  00:03:05,250
So here, I'll add a for/in loop and loop through all MyMap keys here,

37

00:03:05,260  -->  00:03:13,210
so of this internal map, this private property and then I'll simply log the key and then the appropriate

38

00:03:13,480  -->  00:03:16,920
value stored in the map.

39

00:03:16,990  -->  00:03:23,730
With that, I'll create a number map here which is a new map,

40

00:03:23,760  -->  00:03:30,450
this should be const of course and I'll set the generic type to be of a number, of type number so

41

00:03:30,450  -->  00:03:35,510
that only numbers can be stored in this map and then I'll access number map,

42

00:03:35,550  -->  00:03:38,400
set an item let's say 10

43

00:03:38,400  -->  00:03:42,270
but of course I also need to give it a key which should be a string as we said,

44

00:03:42,270  -->  00:03:46,380
so I'll name it apples so that we have 10 apples here or whatever,

45

00:03:48,740  -->  00:03:54,680
add another where I set this to bananas, let's say 2,

46

00:03:55,210  -->  00:04:00,960
then I want to print an item which I get from this map,

47

00:04:01,120  -->  00:04:08,330
so number map getItem and I want to get the apples

48

00:04:08,540  -->  00:04:12,750
and then I want to print MyMap,

49

00:04:12,930  -->  00:04:19,460
so printMap before I then call the clear method on it

50

00:04:21,250  -->  00:04:25,510
just to use all of the methods I created and then print it again.

51

00:04:25,550  -->  00:04:32,650
So with this, let's save it and go to the console, reload and have a look at it.

52

00:04:32,690  -->  00:04:41,050
Now you see 10 which is this console log where I simply get my apples item,

53

00:04:41,090  -->  00:04:47,540
then you see apples 10, bananas 2 which you see result from this printMap call.

54

00:04:47,850  -->  00:04:53,380
Well then you see nothing because this printMap call here doesn't print anything

55

00:04:53,480  -->  00:04:59,710
since I don't have any items left because I cleared MyMap and of course since this is generic, I can

56

00:04:59,710  -->  00:05:09,670
copy this and change it to be a string map here where this should be of type string.

57

00:05:09,670  -->  00:05:16,220
Now of course I can't add ten and two to anymore but I could add 10 and 2, like this

58

00:05:17,570  -->  00:05:20,900
and then if I save this, we shouldn't have any errors,

59

00:05:20,900  -->  00:05:21,830
looks fine,

60

00:05:22,460  -->  00:05:24,140
let's have a look at the console,

61

00:05:24,140  -->  00:05:29,300
well I'm getting pretty much the same output but as you can see by the coloring, now I'm having strings

62

00:05:29,300  -->  00:05:31,700
here instead of numbers.

63

00:05:31,700  -->  00:05:39,230
So that is a pretty cool example on how such a generic would make sense if you want to create a

64

00:05:39,230  -->  00:05:47,330
map where you only want to store any type in theory but in one map, only one type, either type number

65

00:05:47,330  -->  00:05:48,620
or type strings

66

00:05:48,800  -->  00:05:52,470
and of course here again you have the advantage that I get support here

67

00:05:52,580  -->  00:05:58,550
since my IDE knows this will be a string in this case, I could access the length, here it knows this

68

00:05:58,550  -->  00:06:05,180
will be a number so I could use all kinds of methods numbers can be used on or methods which can be

69

00:06:05,180  -->  00:06:06,500
used on numbers.

70

00:06:06,560  -->  00:06:12,140
So that is an example for a generic class and how to use generics.
